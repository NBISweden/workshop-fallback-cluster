#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Run preflight-check
/KubeNow_root/bin/preflight-check config.tfvars

# Run pre-apply hook
/KubeNow_root/bin/pre-apply

# Read config file into variable as as json
kn_config=$(json2hcl -reverse <config.tfvars)

# Set variables from json-config
host_cloud=$(jq -r '.provider' <<<"$kn_config")
image_name=$(jq -r '.boot_image' <<<"$kn_config")
skip_image_import=$(jq -r '.skip_image_import' <<<"$kn_config")

# Check for recognized cloud provider
if ! grep -qw "$host_cloud" <<<"openstack gce azure aws kvm"; then
  echo >&2 "Error: unrecognized host cloud '$host_cloud' in config file config.tfvars"
  exit 1
fi

# Get OS_AUTH_TOKEN via voms-proxy
if [[ "$OS_AUTH_TYPE" == "v2voms" ]]; then
  # shellcheck disable=SC1091
  source /KubeNow_root/bin/voms-create-token
  # always skip_image_import
  skip_image_import="true"
fi

# Import image (AWS doesn't need it)
if [[ -z "$skip_image_import" ]] && [[ "$host_cloud" != 'aws' ]]; then
  export KN_GCE_ACCOUNT_FILE_PATH="$PWD/service-account.json"
  export TF_VARS_FILE="$PWD/config.tfvars"
  export KN_IMAGE_NAME="$image_name"
  /KubeNow_root/bin/image-create-"$host_cloud".sh
fi

# Deploy
terraform init --plugin-dir=/terraform_plugins "/KubeNow_root/$host_cloud"

# shellcheck disable=SC2086
terraform apply $TERRAFORM_OPT -var-file=config.tfvars "/KubeNow_root/$host_cloud"

# Provision

# Read the provision list from the kn_config
provision=$(echo "$kn_config" | jq -r --compact-output 'select(.provision != null) | .provision[]')

# The --compact-output creates one json-object per line from array of provision-actions
# Convert to base64 to preserve whitespace and citations in bash loop
# Execute actions (ansible or helm) with supplied variables/parameters
actions=$(echo "$provision" | jq -r --compact-output '.action[]? | @base64')
for action_base64 in $actions; do
  action=$(base64 --decode <<<"$action_base64")

  type=$(echo "$action" | jq -r '.type')
  case "$type" in
  ansible-playbook)
    echo "Inside kn-apply ansible-playbook"
    playbook=$(echo "$action" | jq -r '.playbook')
    extra_vars=$(echo "$action" | jq -r --compact-output 'select(.extra_vars != null) | .extra_vars[]')

    echo "Applying playbook $playbook"
    # shellcheck disable=SC2086
    ansible-playbook $ANSIBLE_OPT -e "$extra_vars" "/KubeNow_root/$playbook"
    echo "Done with ansible-playbook: $playbook"
    ;;

  helm)
    echo "Inside kn-apply helm"
    chart_repo=$(echo "$action" | jq -r '.chart_repo')
    chart_repo_name=$(echo "$action" | jq -r '.chart_repo_name')
    chart_name=$(echo "$action" | jq -r '.chart_name')
    release_name=$(echo "$action" | jq -r '.release_name')
    values=$(echo "$action" | jq -r --compact-output 'select(.values != null) | .values[]')
    target_host="master"

    # Add repo if specified
    if [ -n "$chart_repo" ]; then
      echo "Add helm chart-repo: $chart_repo"
      ansible "$target_host" -a "helm repo add $chart_repo_name $chart_repo"
    fi

    # Create and upload values-file
    tmpfile=$(mktemp)
    echo "$values" >tmpfile
    ansible "$target_host" -m copy -a "src=$tmpfile dest=/tmp/helm-values-release-$release_name.json"

    # Install chart
    echo "Install helm chart: $chart_name"
    ansible "$target_host" -a "helm upgrade --install -f /tmp/helm-values-release-$release_name.json $release_name $chart_repo_name/$chart_name"

    echo "Done with helm chart: $chart_name"
    ;;

  local-exec)
    echo "Inside kn-apply local-exec"
    command=$(echo "$action" | jq -r '.command')

    echo "Exec command: $command"

    # execute command
    $command
    echo "Done with local-exec"
    ;;

  esac
done
